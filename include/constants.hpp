#pragma once

#include <cstdint>

#include <sqlite3.h>

namespace hsqlite {
  // Constants
  enum error_code : std::uint16_t {
    // Success
    OK          = SQLITE_OK,
    ROW         = SQLITE_ROW,
    DONE        = SQLITE_DONE,

    // Primary result codes
    ABORT       = SQLITE_ABORT,
    AUTH        = SQLITE_AUTH,
    BUSY        = SQLITE_BUSY,
    CANTOPEN    = SQLITE_CANTOPEN,
    CONSTRAINT  = SQLITE_CONSTRAINT,
    CORRUPT     = SQLITE_CORRUPT,
    EMPTY       = SQLITE_EMPTY,
    ERROR       = SQLITE_ERROR,
    FORMAT      = SQLITE_FORMAT,
    FULL        = SQLITE_FULL,
    INTERNAL    = SQLITE_INTERNAL,
    INTERRUPT   = SQLITE_INTERRUPT,
    IOERR       = SQLITE_IOERR,
    LOCKED      = SQLITE_LOCKED,
    MISMATCH    = SQLITE_MISMATCH,
    MISUSE      = SQLITE_MISUSE,
    NOLFS       = SQLITE_NOLFS,
    NOMEM       = SQLITE_NOMEM,
    NOTADB      = SQLITE_NOTADB,
    NOTFOUND    = SQLITE_NOTFOUND,
    NOTICE      = SQLITE_NOTICE,
    PERM        = SQLITE_PERM,
    PROTOCOL    = SQLITE_PROTOCOL,
    RANGE       = SQLITE_RANGE,
    READONLY    = SQLITE_READONLY,
    SCHEMA      = SQLITE_SCHEMA,
    TOOBIG      = SQLITE_TOOBIG,
    WARNING     = SQLITE_WARNING,

    // Extended result codes
    ABORT_ROLLBACK              = SQLITE_ABORT_ROLLBACK,
    AUTH_USER                   = SQLITE_AUTH_USER,
    BUSY_RECOVERY               = SQLITE_BUSY_RECOVERY,
    BUSY_SNAPSHOT               = SQLITE_BUSY_SNAPSHOT,
    BUSY_TIMEOUT                = SQLITE_BUSY_TIMEOUT,
    CANTOPEN_CONVPATH           = SQLITE_CANTOPEN_CONVPATH,
    CANTOPEN_DIRTYWAL           = SQLITE_CANTOPEN_DIRTYWAL,
    CANTOPEN_FULLPATH           = SQLITE_CANTOPEN_FULLPATH,
    CANTOPEN_ISDIR              = SQLITE_CANTOPEN_ISDIR,
    CANTOPEN_NOTEMPDIR          = SQLITE_CANTOPEN_NOTEMPDIR,
    CANTOPEN_SYMLINK            = SQLITE_CANTOPEN_SYMLINK,
    CONSTRAINT_CHECK            = SQLITE_CONSTRAINT_CHECK,
    CONSTRAINT_COMMITHOOK       = SQLITE_CONSTRAINT_COMMITHOOK,
    CONSTRAINT_DATATYPE         = SQLITE_CONSTRAINT_DATATYPE,
    CONSTRAINT_FOREIGNKEY       = SQLITE_CONSTRAINT_FOREIGNKEY,
    CONSTRAINT_FUNCTION         = SQLITE_CONSTRAINT_FUNCTION,
    CONSTRAINT_NOTNULL          = SQLITE_CONSTRAINT_NOTNULL,
    CONSTRAINT_PINNED           = SQLITE_CONSTRAINT_PINNED,
    CONSTRAINT_PRIMARYKEY       = SQLITE_CONSTRAINT_PRIMARYKEY,
    CONSTRAINT_ROWID            = SQLITE_CONSTRAINT_ROWID,
    CONSTRAINT_TRIGGER          = SQLITE_CONSTRAINT_TRIGGER,
    CONSTRAINT_UNIQUE           = SQLITE_CONSTRAINT_UNIQUE,
    CONSTRAINT_VTAB             = SQLITE_CONSTRAINT_VTAB,
    CORRUPT_INDEX               = SQLITE_CORRUPT_INDEX,
    CORRUPT_SEQUENCE            = SQLITE_CORRUPT_SEQUENCE,
    CORRUPT_VTAB                = SQLITE_CORRUPT_VTAB,
    ERROR_MISSING_COLLSEQ       = SQLITE_ERROR_MISSING_COLLSEQ,
    ERROR_RETRY                 = SQLITE_ERROR_RETRY,
    ERROR_SNAPSHOT              = SQLITE_ERROR_SNAPSHOT,
    IOERR_ACCESS                = SQLITE_IOERR_ACCESS,
    IOERR_AUTH                  = SQLITE_IOERR_AUTH,
    IOERR_BEGIN_ATOMIC          = SQLITE_IOERR_BEGIN_ATOMIC,
    IOERR_BLOCKED               = SQLITE_IOERR_BLOCKED,
    IOERR_CHECKRESERVEDLOCK     = SQLITE_IOERR_CHECKRESERVEDLOCK,
    IOERR_CLOSE                 = SQLITE_IOERR_CLOSE,
    IOERR_COMMIT_ATOMIC         = SQLITE_IOERR_COMMIT_ATOMIC,
    IOERR_CONVPATH              = SQLITE_IOERR_CONVPATH,
    IOERR_CORRUPTFS             = SQLITE_IOERR_CORRUPTFS,
    IOERR_DATA                  = SQLITE_IOERR_DATA,
    IOERR_DELETE                = SQLITE_IOERR_DELETE,
    IOERR_DELETE_NOENT          = SQLITE_IOERR_DELETE_NOENT,
    IOERR_DIR_CLOSE             = SQLITE_IOERR_DIR_CLOSE,
    IOERR_DIR_FSYNC             = SQLITE_IOERR_DIR_FSYNC,
    IOERR_FSTAT                 = SQLITE_IOERR_FSTAT,
    IOERR_FSYNC                 = SQLITE_IOERR_FSYNC,
    IOERR_GETTEMPPATH           = SQLITE_IOERR_GETTEMPPATH,
    IOERR_LOCK                  = SQLITE_IOERR_LOCK,
    IOERR_MMAP                  = SQLITE_IOERR_MMAP,
    IOERR_NOMEM                 = SQLITE_IOERR_NOMEM,
    IOERR_RDLOCK                = SQLITE_IOERR_RDLOCK,
    IOERR_READ                  = SQLITE_IOERR_READ,
    IOERR_ROLLBACK_ATOMIC       = SQLITE_IOERR_ROLLBACK_ATOMIC,
    IOERR_SEEK                  = SQLITE_IOERR_SEEK,
    IOERR_SHMLOCK               = SQLITE_IOERR_SHMLOCK,
    IOERR_SHMMAP                = SQLITE_IOERR_SHMMAP,
    IOERR_SHMOPEN               = SQLITE_IOERR_SHMOPEN,
    IOERR_SHMSIZE               = SQLITE_IOERR_SHMSIZE,
    IOERR_SHORT_READ            = SQLITE_IOERR_SHORT_READ,
    IOERR_TRUNCATE              = SQLITE_IOERR_TRUNCATE,
    IOERR_UNLOCK                = SQLITE_IOERR_UNLOCK,
    IOERR_VNODE                 = SQLITE_IOERR_VNODE,
    IOERR_WRITE                 = SQLITE_IOERR_WRITE,
    LOCKED_SHAREDCACHE          = SQLITE_LOCKED_SHAREDCACHE,
    LOCKED_VTAB                 = SQLITE_LOCKED_VTAB,
    NOTICE_RECOVER_ROLLBACK     = SQLITE_NOTICE_RECOVER_ROLLBACK,
    NOTICE_RECOVER_WAL          = SQLITE_NOTICE_RECOVER_WAL,
    OK_LOAD_PERMANENTLY         = SQLITE_OK_LOAD_PERMANENTLY,
    READONLY_CANTINIT           = SQLITE_READONLY_CANTINIT,
    READONLY_CANTLOCK           = SQLITE_READONLY_CANTLOCK,
    READONLY_DBMOVED            = SQLITE_READONLY_DBMOVED,
    READONLY_DIRECTORY          = SQLITE_READONLY_DIRECTORY,
    READONLY_RECOVERY           = SQLITE_READONLY_RECOVERY,
    READONLY_ROLLBACK           = SQLITE_READONLY_ROLLBACK,
    WARNING_AUTOINDEX           = SQLITE_WARNING_AUTOINDEX
  };

  enum flag : std::uint32_t {
    // Basic flags
    OPEN_READONLY       = SQLITE_OPEN_READONLY,
    OPEN_READWRITE      = SQLITE_OPEN_READWRITE,
    OPEN_CREATE         = SQLITE_OPEN_CREATE,
    
    // Extended flags
    OPEN_URI            = SQLITE_OPEN_URI,
    OPEN_MEMORY         = SQLITE_OPEN_MEMORY,
    OPEN_NOMUTEX        = SQLITE_OPEN_NOMUTEX,
    OPEN_FULLMUTEX      = SQLITE_OPEN_FULLMUTEX,
    OPEN_SHAREDCACHE    = SQLITE_OPEN_SHAREDCACHE,
    OPEN_PRIVATECACHE   = SQLITE_OPEN_PRIVATECACHE,
    OPEN_EXRESCODE      = SQLITE_OPEN_EXRESCODE,
    OPEN_NOFOLLOW       = SQLITE_OPEN_NOFOLLOW
  };

  enum encoding : std::uint8_t {
    UTF8                = SQLITE_UTF8,
    UTF16               = SQLITE_UTF16,
    UTF16BE             = SQLITE_UTF16BE,
    UTF16LE             = SQLITE_UTF16LE
  };

  enum type : std::uint8_t {
    INTEGER             = SQLITE_INTEGER,
    FLOAT               = SQLITE_FLOAT,
    BLOB                = SQLITE_BLOB,
    NULL_               = SQLITE_NULL,
    TEXT                = SQLITE_TEXT
  };

  enum db_config {
    LOOKASIDE             = SQLITE_DBCONFIG_LOOKASIDE,
    ENABLE_FKEY           = SQLITE_DBCONFIG_ENABLE_FKEY,
    ENABLE_TRIGGER        = SQLITE_DBCONFIG_ENABLE_TRIGGER,
    ENABLE_VIEW           = SQLITE_DBCONFIG_ENABLE_VIEW,
    ENABLE_FTS3_TOKENIZER = SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER,
    ENABLE_LOAD_EXTENSION = SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION,
    MAINDBNAME            = SQLITE_DBCONFIG_MAINDBNAME,
    NO_CKPT_ON_CLOSE      = SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE,
    ENABLE_QPSG           = SQLITE_DBCONFIG_ENABLE_QPSG,
    TRIGGER_EQP           = SQLITE_DBCONFIG_TRIGGER_EQP,
    RESET_DATABASE        = SQLITE_DBCONFIG_RESET_DATABASE,
    DEFENSIVE             = SQLITE_DBCONFIG_DEFENSIVE,
    WRITABLE_SCHEMA       = SQLITE_DBCONFIG_WRITABLE_SCHEMA,
    LEGACY_ALTER_TABLE    = SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,
    DQS_DDL               = SQLITE_DBCONFIG_DQS_DDL,
    DQG_DML               = SQLITE_DBCONFIG_DQS_DML,
    TRUSTED_SCHEMA        = SQLITE_DBCONFIG_TRUSTED_SCHEMA,
    LEGACY_FILE_FORMAT    = SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,
    STMT_SCANSTATUS       = SQLITE_DBCONFIG_STMT_SCANSTATUS,
    REVERSE_SCANORDER     = SQLITE_DBCONFIG_REVERSE_SCANORDER
  };
}